# We select data from 2002 because before there is not enough data
names_col <- names(traffic)
selected_col <- c(names_col[1], names_col[50:length(names_col)])
traffic <- traffic %>% dplyr::select(all_of(selected_col))
View(traffic)
# Merged
traffic_mg <- merge(traffic, airports_names, by = "Airport", all.x = TRUE)
View(traffic_mg)
airports_dupli <- duplicated(traffic_mg)
length(traffic_mg[airports_dupli,])
# Duplicates erase
traffic_mg <- unique(traffic_mg)
View(traffic_mg)
airports_without_country <- traffic_mg[is.na(traffic_mg$Country), ]
as.vector(airports_without_country$Airport)
styled_dt(traffic_mg, 5)
library(stargazer))
library(stargazer)
stargazer(traffic_mg, 5)
# We rotate the dataframe to do the time series
traffic_pivot <- tidyr::pivot_longer(traffic_mg, cols = -c("Airport", "Country"), names_to = "Date", values_to = "Passengers")
# We delete the NaN values
traffic_pivot$Passengers[traffic_pivot$Passengers == ":"] <- 0
# We repalce the NaN values with 0
traffic_pivot$Passengers[traffic_pivot$Passengers == ":"] <- 0
# Numerical values
traffic_pivot$Passengers <- as.numeric(traffic_pivot$Passengers)
# Date
traffic_pivot$Date <- zoo::as.Date(paste0(traffic_pivot$Date, "-01"), format="%Y-%m-%d")
View(traffic_pivot)
# We rotate the dataframe to do the time series
traffic_pivot <- tidyr::pivot_longer(traffic_mg, cols = -c("Airport", "Country"), names_to = "Date", values_to = "Passengers")
# We repalce the NaN values with 0
traffic_pivot$Passengers[traffic_pivot$Passengers == ":"] <- 0
# Numerical values
traffic_pivot$Passengers <- as.numeric(traffic_pivot$Passengers)
# Date
traffic_pivot$Date <- zoo::as.Date(paste0(traffic_pivot$Date, "-01"), format="%Y-%m-%d")
# We sum the passengers for each airport during the period 2002-2023 to select the airports with the most traffic
traffic_sum <- traffic_pivot %>% group_by(Airport, Country) %>% summarise(sumPassengers = sum(Passengers))
# Selection
airports_best_ranked <- traffic_sum %>% group_by(Country) %>% slice_max(order_by = sumPassengers)
View(airports_best_ranked)
# Erase
airports_best_ranked <- airports_best_ranked %>% filter(sumPassengers != 0)
# Selection
airports_best_ranked <- traffic_sum %>% group_by(Country) %>% slice_max(order_by = sumPassengers)
# Erase
airports_best_ranked <- airports_best_ranked %>% filter(sumPassengers != 0)
airports_best_ranked <- airports_best_ranked %>% filter(!(Country %in% list_countries))
# Final dataset
airports_final_list <- unique(airports_best_ranked$Airport)
# Final dataset
airports_best_ranked <- unique(airports_best_ranked$Airport)
airports_final_list
traffic_checked <- traffic_pivot %>% filter(Airport %in% airports_final_list)
View(traffic_checked)
traffic_checked <- traffic_checked[traffic_checked$Date <= as.Date("2023-05-01"),]
# We erase places which are not true countries
list_countries = c("Faroe Islands (Denmark)", "Fictional/Private", "French Guiana",
"Guadeloupe (France)", "Martinique (France)", "Mayotte (France)", "Reunion (France)",
"Saint Barthelemy (France)", "Saint Martin (France)", "Svalbard (Norway)", NA)
airports_best_ranked <- airports_best_ranked %>% filter(!(Country %in% list_countries))
# All libraries we used
library(dplyr)
library(zoo)
library(xts)
library(tidyr)
library(magrittr)
library(ggplot2)
library(tseries)
library(forecast)
library(stargazer)
# Sourcing the file wich contains the functions to find the best parameters with regard to AIC and BIC
source("hyperparameters-selection.R")
# Loading the best hyperparameters for our model we previously found
load("hyperparameters.RData")
# Format of our dataframes
styled_dt <- function(df, n=5) {
DT::datatable(df,
extensions = 'Buttons',
rownames = FALSE,
class = 'dataTables_wrapper',
options = list(
scrollX = TRUE,
pageLength = n,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel')
))
}
# We import our dataset
traffic <- openxlsx::read.xlsx(xlsxFile="datasets/data_airports_APP.xlsx")
# Simplified label
traffic <- traffic %>% dplyr::rename("Airport" = "REP_AIRP.(Labels)")
# We want to add the country of each airport
airports_names<- read.csv("datasets/airports_by_country.csv")
airports_names$Airport <- paste(airports_names$Airport, "airport", sep = " ")
airports_names <- airports_names %>% mutate(Country = ifelse(Country == "Chile", "Spain", Country))
# We select data from 2002 because before there is not enough data
names_col <- names(traffic)
selected_col <- c(names_col[1], names_col[50:length(names_col)])
traffic <- traffic %>% dplyr::select(all_of(selected_col))
# We add the country of each airport
traffic_mg <- merge(traffic, airports_names, by = "Airport", all.x = TRUE)
# We erase the duplicated airports
airports_dupli <- duplicated(traffic_mg)
length(traffic_mg[airports_dupli,])
traffic_mg <- unique(traffic_mg)
# REMPLACER PAR UN STARGAZER
stargazer(traffic_mg, 5)
# We rotate the dataframe to do the time series
traffic_pivot <- tidyr::pivot_longer(traffic_mg, cols = -c("Airport", "Country"), names_to = "Date", values_to = "Passengers")
# We repalce the NaN values with 0
traffic_pivot$Passengers[traffic_pivot$Passengers == ":"] <- 0
# Numerical values
traffic_pivot$Passengers <- as.numeric(traffic_pivot$Passengers)
# We add a 1 as the number in the month for the date
traffic_pivot$Date <- zoo::as.Date(paste0(traffic_pivot$Date, "-01"), format="%Y-%m-%d")
# We sum the passengers for each airport during the period 2002-2023 to select the airports with the most traffic
traffic_sum <- traffic_pivot %>% group_by(Airport, Country) %>% summarise(sumPassengers = sum(Passengers))
# Selection
airports_best_ranked <- traffic_sum %>% group_by(Country) %>% slice_max(order_by = sumPassengers)
# We erase airports with no data
airports_best_ranked <- airports_best_ranked %>% filter(sumPassengers != 0)
# We erase places which are not true countries
list_countries = c("Faroe Islands (Denmark)", "Fictional/Private", "French Guiana",
"Guadeloupe (France)", "Martinique (France)", "Mayotte (France)", "Reunion (France)",
"Saint Barthelemy (France)", "Saint Martin (France)", "Svalbard (Norway)", NA)
airports_best_ranked <- airports_best_ranked %>% filter(!(Country %in% list_countries))
# Final dataset
airports_final_list <- unique(airports_best_ranked$Airport)
traffic_checked <- traffic_pivot %>% filter(Airport %in% airports_final_list)
traffic_checked <- traffic_checked[traffic_checked$Date <= as.Date("2023-05-01"),]
write.csv(traffic_checked, file = "datasets/data_airports_cleaned_APP.csv", row.names = FALSE, na = "NA")
styled_dt(traffic_checked)
styled_dt(traffic_checked)
# Final dataset dor descriptive statistics
airports_final_list <- unique(airports_best_ranked$Airport)
traffic_checked <- traffic_pivot %>% filter(Airport %in% airports_final_list)
# We create a csv file with the cleaned data
write.csv(traffic_checked, file = "datasets/data_airports_cleaned_APP.csv", row.names = FALSE, na = "NA")
# Plot
ggplot(eu_sum, aes(x = EU_2019, y = n, fill = EU_2019)) +
geom_bar(stat = "identity") +
geom_text(aes(label = n), vjust = 3, colour = 'white', size = 4) +
labs(title = "Repartition of european countries", x = "", y = "Number of countries", fill = "European Union (2019)") +
theme_minimal()
# WE select 5 representative airports for our statistical analysis and our model
# List of the airports
airports_to_keep <- c("PARIS-CHARLES DE GAULLE airport", "ADOLFO SUAREZ MADRID-BARAJAS airport", "ROMA/FIUMICINO airport", "KOBENHAVN/KASTRUP airport", "OSLO/GARDERMOEN airport")
# Filter
filtered_traffic_checked <- traffic_checked %>%
dplyr::filter(Airport %in% airports_to_keep)
# WE select 5 representative airports for our statistical analysis and our model
# List of the 5 xairports
airports_to_keep <- c("PARIS-CHARLES DE GAULLE airport", "ADOLFO SUAREZ MADRID-BARAJAS airport", "ROMA/FIUMICINO airport", "KOBENHAVN/KASTRUP airport", "OSLO/GARDERMOEN airport")
# Filter
filtered_traffic_checked <- traffic_checked %>%
dplyr::filter(Airport %in% airports_to_keep)
# Plot
ggplot2::ggplot(filtered_traffic_checked, aes(x = Date, y = Passengers, color = Country)) +
geom_line() +
theme_minimal() +
labs(title = "Monthly Passengers per Country", x = "Date", y = "Number of Passengers")
# Plot of the traffic between 2002 and 2023 of the 5 airports
ggplot2::ggplot(filtered_traffic_checked, aes(x = Date, y = Passengers, color = Country)) +
geom_line() +
theme_minimal() +
labs(title = "Monthly Passengers per Country", x = "Date", y = "Number of Passengers")
traffic_mean <- traffic_checked %>%
group_by(Date) %>%
summarize(MeanPassengers = mean(Passengers, na.rm = TRUE))
dygraphs::dygraph(traffic_mean, main = "Average Passengers per Month", xlab = "Date")
# We plot the average number of passengers per month
traffic_mean <- traffic_checked %>%
group_by(Date) %>%
summarize(MeanPassengers = mean(Passengers, na.rm = TRUE))
dygraphs::dygraph(traffic_mean, main = "Average Passengers per Month", xlab = "Date")
paris <- traffic_checked %>% dplyr::filter(Airport == "PARIS-CHARLES DE GAULLE airport")
View(paris)
# Time serie function
paris_ts <- paris %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2023, 5))
# We will focus on PARIS CDG to do some analysis because the 5 airports have the same trend
paris <- traffic_checked %>% dplyr::filter(Airport == "PARIS-CHARLES DE GAULLE airport")
# Time serie function
paris_ts <- paris %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2023, 5))
dygraphs::dygraph(data=paris_ts, main="Passengers per month at Paris Charles de Gaulle")
paris <- traffic_checked %>% dplyr::filter(Airport == "PARIS-CHARLES DE GAULLE airport")
# Time serie function
paris_ts <- paris %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2023, 5))
dygraphs::dygraph(data=paris_ts, main="Passengers per month at Paris Charles de Gaulle")
madrid <- traffic_checked %>% dplyr::filter(Airport == "ADOLFO SUAREZ MADRID-BARAJAS airport")
# Time serie function
madrid_ts <- madrid %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2023, 5))
# All libraries we used
library(dplyr)
library(zoo)
library(xts)
library(tidyr)
library(magrittr)
library(ggplot2)
library(tseries)
library(forecast)
library(stargazer)
# Sourcing the file wich contains the functions to find the best parameters with regard to AIC and BIC
source("hyperparameters-selection.R")
# Loading the best hyperparameters for our model we previously found
load("hyperparameters.RData")
# Format of our dataframes
styled_dt <- function(df, n=5) {
DT::datatable(df,
extensions = 'Buttons',
rownames = FALSE,
class = 'dataTables_wrapper',
options = list(
scrollX = TRUE,
pageLength = n,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel')
))
}
# We import our dataset
traffic <- openxlsx::read.xlsx(xlsxFile="datasets/data_airports_APP.xlsx")
# Simplified label
traffic <- traffic %>% dplyr::rename("Airport" = "REP_AIRP.(Labels)")
# We want to add the country of each airport
airports_names<- read.csv("datasets/airports_by_country.csv")
airports_names$Airport <- paste(airports_names$Airport, "airport", sep = " ")
airports_names <- airports_names %>% mutate(Country = ifelse(Country == "Chile", "Spain", Country))
# We select data from 2002 because before there is not enough data
names_col <- names(traffic)
selected_col <- c(names_col[1], names_col[50:length(names_col)])
traffic <- traffic %>% dplyr::select(all_of(selected_col))
# We add the country of each airport
traffic_mg <- merge(traffic, airports_names, by = "Airport", all.x = TRUE)
# We erase the duplicated airports
airports_dupli <- duplicated(traffic_mg)
length(traffic_mg[airports_dupli,])
traffic_mg <- unique(traffic_mg)
# REMPLACER PAR UN STARGAZER
stargazer(traffic_mg, 5)
# We rotate the dataframe to do the time series
traffic_pivot <- tidyr::pivot_longer(traffic_mg, cols = -c("Airport", "Country"), names_to = "Date", values_to = "Passengers")
# We repalce the NaN values with 0
traffic_pivot$Passengers[traffic_pivot$Passengers == ":"] <- 0
# Numerical values
traffic_pivot$Passengers <- as.numeric(traffic_pivot$Passengers)
# We add a 1 as the number in the month for the date
traffic_pivot$Date <- zoo::as.Date(paste0(traffic_pivot$Date, "-01"), format="%Y-%m-%d")
# We sum the passengers for each airport during the period 2002-2023 to select the airports with the most traffic
traffic_sum <- traffic_pivot %>% group_by(Airport, Country) %>% summarise(sumPassengers = sum(Passengers))
# Selection
airports_best_ranked <- traffic_sum %>% group_by(Country) %>% slice_max(order_by = sumPassengers)
# We erase airports with no data
airports_best_ranked <- airports_best_ranked %>% filter(sumPassengers != 0)
# We erase places which are not true countries
list_countries = c("Faroe Islands (Denmark)", "Fictional/Private", "French Guiana",
"Guadeloupe (France)", "Martinique (France)", "Mayotte (France)", "Reunion (France)",
"Saint Barthelemy (France)", "Saint Martin (France)", "Svalbard (Norway)", NA)
airports_best_ranked <- airports_best_ranked %>% filter(!(Country %in% list_countries))
# Final dataset for descriptive statistics
airports_final_list <- unique(airports_best_ranked$Airport)
traffic_checked <- traffic_pivot %>% filter(Airport %in% airports_final_list)
traffic_checked <- traffic_checked[traffic_checked$Date <= as.Date("2023-05-01"),]
# We create a csv file with the cleaned data
write.csv(traffic_checked, file = "datasets/final-dataset.csv", row.names = FALSE, na = "NA")
# WE select 5 representative airports for our statistical analysis and our model
# List of the 5 xairports
airports_to_keep <- c("PARIS-CHARLES DE GAULLE airport", "ADOLFO SUAREZ MADRID-BARAJAS airport", "ROMA/FIUMICINO airport", "KOBENHAVN/KASTRUP airport", "OSLO/GARDERMOEN airport")
# Filter
filtered_traffic_checked <- traffic_checked %>%
dplyr::filter(Airport %in% airports_to_keep)
# Plot of the traffic between 2002 and 2023 of the 5 airports
ggplot2::ggplot(filtered_traffic_checked, aes(x = Date, y = Passengers, color = Country)) +
geom_line() +
theme_minimal() +
labs(title = "Monthly Passengers per Country", x = "Date", y = "Number of Passengers")
# We plot the average number of passengers per month
traffic_mean <- traffic_checked %>%
group_by(Date) %>%
summarize(MeanPassengers = mean(Passengers, na.rm = TRUE))
dygraphs::dygraph(traffic_mean, main = "Average Passengers per Month", xlab = "Date")
paris <- traffic_checked %>% dplyr::filter(Airport == "PARIS-CHARLES DE GAULLE airport")
# Time serie function
paris_ts <- paris %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2023, 5))
dygraphs::dygraph(data=paris_ts, main="Passengers per month at Paris Charles de Gaulle")
madrid <- traffic_checked %>% dplyr::filter(Airport == "ADOLFO SUAREZ MADRID-BARAJAS airport")
# Time serie function
madrid_ts <- madrid %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2023, 5))
dygraphs::dygraph(data=madrid_ts, main="Passengers per month at Madrid")
roma <- traffic_checked %>% dplyr::filter(Airport == "ROMA/FIUMICINO airport")
# Time serie function
roma_ts <- roma %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2023, 5))
dygraphs::dygraph(data=roma_ts, main="Passengers per month at Roma")
copenhagen <- traffic_checked %>% dplyr::filter(Airport == "KOBENHAVN/KASTRUP airport")
# Time serie function
copenhagen_ts <- copenhagen %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2023, 5))
dygraphs::dygraph(data=copenhagen_ts, main="Passengers per month at Copenhagen")
oslo <- traffic_checked %>% dplyr::filter(Airport == "OSLO/GARDERMOEN airport")
# Time serie function
oslo_ts <- oslo %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2023, 5))
dygraphs::dygraph(data=oslo_ts, main="Passengers per month at Oslo Gardermoen")
# Paris
paris_ts19 <- paris %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2019, 12))
paris_ts19 <- na.omit(paris_ts19)
# Madrid
madrid_ts19 <- madrid %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2019, 12))
madrid_ts19 <- na.omit(madrid_ts19)
# Roma
roma_ts19 <- roma %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2019, 12))
roma_ts19 <- na.omit(roma_ts19)
# Copenhagen
copenhagen_ts19 <- copenhagen %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2019, 12))
copenhagen_ts19 <- na.omit(copenhagen_ts19)
# Oslo
oslo_ts19 <- oslo %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2019, 12))
oslo_ts19 <- na.omit(oslo_ts19)
# All libraries we used
library(dplyr)
library(zoo)
library(xts)
library(tidyr)
library(magrittr)
library(ggplot2)
library(tseries)
library(forecast)
library(stargazer)
# Sourcing the file wich contains the functions to find the best parameters with regard to AIC and BIC
source("hyperparameters-selection.R")
# Loading the best hyperparameters for our model we previously found
load("hyperparameters.RData")
# Format of our dataframes
styled_dt <- function(df, n=5) {
DT::datatable(df,
extensions = 'Buttons',
rownames = FALSE,
class = 'dataTables_wrapper',
options = list(
scrollX = TRUE,
pageLength = n,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel')
))
}
# We import our dataset
traffic <- openxlsx::read.xlsx(xlsxFile="datasets/data_airports_APP.xlsx")
# Simplified label
traffic <- traffic %>% dplyr::rename("Airport" = "REP_AIRP.(Labels)")
# We want to add the country of each airport
airports_names<- read.csv("datasets/airports_by_country.csv")
airports_names$Airport <- paste(airports_names$Airport, "airport", sep = " ")
airports_names <- airports_names %>% mutate(Country = ifelse(Country == "Chile", "Spain", Country))
# We select data from 2002 because before there is not enough data
names_col <- names(traffic)
selected_col <- c(names_col[1], names_col[50:length(names_col)])
traffic <- traffic %>% dplyr::select(all_of(selected_col))
# We add the country of each airport
traffic_mg <- merge(traffic, airports_names, by = "Airport", all.x = TRUE)
# We erase the duplicated airports
airports_dupli <- duplicated(traffic_mg)
length(traffic_mg[airports_dupli,])
traffic_mg <- unique(traffic_mg)
# REMPLACER PAR UN STARGAZER
stargazer(traffic_mg, 5)
# We rotate the dataframe to do the time series
traffic_pivot <- tidyr::pivot_longer(traffic_mg, cols = -c("Airport", "Country"), names_to = "Date", values_to = "Passengers")
# We repalce the NaN values with 0
traffic_pivot$Passengers[traffic_pivot$Passengers == ":"] <- 0
# Numerical values
traffic_pivot$Passengers <- as.numeric(traffic_pivot$Passengers)
# We add a 1 as the number in the month for the date
traffic_pivot$Date <- zoo::as.Date(paste0(traffic_pivot$Date, "-01"), format="%Y-%m-%d")
# We sum the passengers for each airport during the period 2002-2023 to select the airports with the most traffic
traffic_sum <- traffic_pivot %>% group_by(Airport, Country) %>% summarise(sumPassengers = sum(Passengers))
# Selection
airports_best_ranked <- traffic_sum %>% group_by(Country) %>% slice_max(order_by = sumPassengers)
# We erase airports with no data
airports_best_ranked <- airports_best_ranked %>% filter(sumPassengers != 0)
# We erase places which are not true countries
list_countries = c("Faroe Islands (Denmark)", "Fictional/Private", "French Guiana",
"Guadeloupe (France)", "Martinique (France)", "Mayotte (France)", "Reunion (France)",
"Saint Barthelemy (France)", "Saint Martin (France)", "Svalbard (Norway)", NA)
airports_best_ranked <- airports_best_ranked %>% filter(!(Country %in% list_countries))
# Final dataset for descriptive statistics
airports_final_list <- unique(airports_best_ranked$Airport)
traffic_checked <- traffic_pivot %>% filter(Airport %in% airports_final_list)
traffic_checked <- traffic_checked[traffic_checked$Date <= as.Date("2023-05-01"),]
# We create a csv file with the cleaned data
write.csv(traffic_checked, file = "datasets/final-dataset.csv", row.names = FALSE, na = "NA")
# WE select 5 representative airports for our statistical analysis and our model
# List of the 5 xairports
airports_to_keep <- c("PARIS-CHARLES DE GAULLE airport", "ADOLFO SUAREZ MADRID-BARAJAS airport", "ROMA/FIUMICINO airport", "KOBENHAVN/KASTRUP airport", "OSLO/GARDERMOEN airport")
# Filter
filtered_traffic_checked <- traffic_checked %>%
dplyr::filter(Airport %in% airports_to_keep)
# Plot of the traffic between 2002 and 2023 of the 5 airports
ggplot2::ggplot(filtered_traffic_checked, aes(x = Date, y = Passengers, color = Country)) +
geom_line() +
theme_minimal() +
labs(title = "Monthly Passengers per Country", x = "Date", y = "Number of Passengers")
# We plot the average number of passengers per month
traffic_mean <- traffic_checked %>%
group_by(Date) %>%
summarize(MeanPassengers = mean(Passengers, na.rm = TRUE))
dygraphs::dygraph(traffic_mean, main = "Average Passengers per Month", xlab = "Date")
#paris <- traffic_checked %>% dplyr::filter(Airport == "PARIS-CHARLES DE GAULLE airport")
# Time serie function
paris_ts <- paris %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2023, 5))
View(paris_ts19_aic_params)
View(paris_ts19_aic_params)
View(paris_ts19_bic_params)
#paris <- traffic_checked %>% dplyr::filter(Airport == "PARIS-CHARLES DE GAULLE airport")
# Time serie function
paris_ts <- paris %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2023, 5))
# We create the time series for the 5 airports
paris <- traffic_checked %>% dplyr::filter(Airport == "PARIS-CHARLES DE GAULLE airport")
paris_ts <- paris %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2023, 5))
dygraphs::dygraph(data=paris_ts, main="Passengers per month at Paris Charles de Gaulle")
madrid <- traffic_checked %>% dplyr::filter(Airport == "ADOLFO SUAREZ MADRID-BARAJAS airport")
# We cut the time series at the end of 2019 to use it as training data for the SARIMA model
paris_ts19 <- paris %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2019, 12))
paris_ts19 <- na.omit(paris_ts19)
madrid_ts19 <- madrid %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2019, 12))
madrid_ts19 <- na.omit(madrid_ts19)
# Roma
roma_ts19 <- roma %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2019, 12))
roma_ts19 <- na.omit(roma_ts19)
# Copenhagen
copenhagen_ts19 <- copenhagen %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2019, 12))
copenhagen_ts19 <- na.omit(copenhagen_ts19)
# Oslo
oslo_ts19 <- oslo %>% dplyr::select(4) %>% ts(frequency = 12, start = c(2002, 1), end = c(2019, 12))
oslo_ts19 <- na.omit(oslo_ts19)
# Trend
ts_decomposed <- decompose(paris_ts19)
# Plot
plot(paris_ts19, col = 'blue', xlab = "Year", ylab = "Passengers",
main = "CDG passengers before seasonal differencing")
lines(ts_decomposed$trend,  col = 'red')
legend("topright", legend = c("Original", "Trend"), col = c("blue", "red"),
lty = c(1, 1), cex = 0.8)
ts_decomposed <- decompose(paris_ts19)
View(ts_decomposed)
# Plot
plot(paris_ts19, col = 'blue', xlab = "Year", ylab = "Passengers",
main = "CDG passengers before seasonal differencing")
lines(ts_decomposed$trend,  col = 'red')
adf_test <- adf.test(paris_ts19, alternative = "stationary")
View(adf_test)
# Results of the ADF test
print(adf_test)
View(paris_ts19_bic_params)
View(paris_ts19_aic_params)
View(paris_ts19_bic_params)
# Plot of the Autocorrelation Function (ACF)
forecast::ggAcf(paris_ts19) +
ggplot2::ggtitle("Sample ACF for CDG airport")
# Plot of the Partial Autocorrelation Function (PACF)
forecast::ggPacf(paris_ts19) +
ggplot2::ggtitle("Sample PACF for CDG airport")
# Plot of the Autocorrelation Function (ACF)
forecast::ggAcf(paris_ts19) +
ggplot2::ggtitle("Sample ACF for CDG airport")
# Plot of the Partial Autocorrelation Function (PACF)
forecast::ggPacf(paris_ts19) +
ggplot2::ggtitle("Sample PACF for CDG airport")
# Difference
paris_ts19_diff <- diff(paris_ts19, lag = 12)
# Plot of the difference
paris_ts19_diff <- diff(paris_ts19, lag = 12)
# Trend
ts_stl <- stl(paris_ts19_diff, s.window = "periodic")
# Plot
plot(paris_ts19_diff, col = 'blue', xlab = "Year", ylab = "Passengers",
main = "CDG passengers after seasonal differencing")
lines(ts_stl$time.series[, "trend"], col = 'red')
# Plot of the difference with the global trend
ts_stl <- stl(paris_ts19_diff, s.window = "periodic")
plot(paris_ts19_diff, col = 'blue', xlab = "Year", ylab = "Passengers",
main = "CDG passengers after seasonal differencing")
lines(ts_stl$time.series[, "trend"], col = 'red')
legend("topright", legend = c("Original", "Trend"), col = c("blue", "red"),
lty = c(1, 1), cex = 0.8)
adf_test2 <- adf.test(paris_ts19_diff, alternative = "stationary")
# Results of the ADF test
print(adf_test2)
# ADF test on the diffrerence
adf_test2 <- adf.test(paris_ts19_diff, alternative = "stationary")
# Results of the ADF test
print(adf_test2)
# Plot of the Autocorrelation Function (ACF)
forecast::ggAcf(paris_ts19_diff) +
ggplot2::ggtitle("Sample ACF for CDG airport after differencing")
# Plot of the Partial Autocorrelation Function (PACF)
forecast::ggPacf(paris_ts19_diff) +
ggplot2::ggtitle("Sample PACF for CDG airport after differencing")
# Get suggestion
paris_ts19_auto_params <- forecast::auto.arima(paris_ts19)
# Modelisation of the SARIMA
# Get suggestion
paris_ts19_auto_params <- forecast::auto.arima(paris_ts19)
View(paris_ts19_aic_params)
View(paris_ts19_auto_params)
ggplot2::ggplot(airports_best_ranked, aes(x = sumPassengers, y = reorder(Country, sumPassengers))) +
geom_bar(stat = "identity", fill = "green") +
labs(title = "Ranking of Countries based on their traffic",
x = "Total passengers carried",
y = "Country")
# Get suggestion of hyperparameters for PARIS with auto.arima
paris_ts19_auto_params <- forecast::auto.arima(paris_ts19)
# Setting the parameters
non_seasonal_order <- paris_ts19_aic_params$min_AIC_params[1:3]
